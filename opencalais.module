<?php

/**
 * @file
 * Contains opencalais.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\opencalais\CalaisService;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;

/**
 * Implements hook_menu().
 */
function opencalais_menu() {
  $items['admin/config/content/opencalais'] = array(
    'title' => 'Open Calais Settings',
    'description' => "Configure Open Calais module.",
    'route_name' => 'opencalais.settings',
  );

  return $items;
}

/**
 * Implements hook_help().
 */
function opencalais_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the opencalais module.
    case 'help.page.opencalais':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Utilize the Open Calais API to tag content.') . '</p>';
      return $output;

    default:
  }
}

/*
 * Implements hook_node_update(Drupal Core Entity EntityInterface $node)
 */

function opencalais_node_update($node){
  // Determine if we have any fields that we want to send up
  $my_config = \Drupal::config('opencalais.opencalaisnodeconfig')->get($node->getType());
  $concat_string = '';
  foreach($my_config as $key => $value) {
    // We append a '. ' because we can't depend on users to enter good data
    $concat_string .= strip_tags($node->get($key)->value . '. ');
  }
  ksm($concat_string);
  
  // Send Values.
  if($concat_string != '') {
    $options = array(
      'apiKey' => 'QOFByCaIzW9E0ezjWpOquJfFXAEVNTdm',
      'contentType' => 'text/plain',
      'content' => strip_tags($concat_string),
      'host' => 'api.thomsonreuters.com',
    );
  
    //$calais = opencalais_get_service($options);
    $calais = new CalaisService($options);
    //Get your tags
    $tags = $calais->analyze();
  } 
  ksm($tags); 
}

/**
 * Return the OpenCalais Service class.
 *
 * @param $options An array of option parameters to be sent to the CalaisService class.
 * @return $object The initialized CalaisService object.
 */
function opencalais_get_service($options = array()) {
  return new CalaisService($options);
}

/**
 * Implements hook_entity_base_field_info().
 */
function opencalais_entity_base_field_info(EntityTypeInterface $entity_type) {
    if (in_array($entity_type->id(), ['taxonomy_term', 'node', 'media'], TRUE)) {

        $fields['opencalais'] = BaseFieldDefinition::create('entity_reference')
            ->setLabel(t('OpenCalais'))
            ->setDescription(t('What was this tagged with.'))
            ->setSetting('target_type', 'taxonomy_term')
            ->setSetting('handler_settings', ['target_bundles' => ['OpenCalais' => 'opencalais']])
            ->setDisplayOptions('view', array(
                'label' => 'above',
                'type' => 'author',
                'weight' => -3,
            ))
            ->setDisplayOptions('form', array(
                'type' => 'entity_reference_autocomplete',
                'settings' => array(
                    'match_operator' => 'CONTAINS',
                    'size' => 60,
                    'placeholder' => '',
                ),
                'weight' => -3,
            ))
            ->setDisplayConfigurable('form', TRUE)
            ->setDisplayConfigurable('view', TRUE);

        return $fields;
    }
}

function opencalais_form_node_event_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

    $form['opencalais_group'] = [
        '#type' => 'details',
        '#title' => t('OpenCalais'),
        '#weight' => 100,
        '#optional' => TRUE,
        '#attributes' => [
            'class' => ['node-form-author'],
        ],
        '#attached' => [
            'library' => ['node/drupal.node'],
        ],
    ];
    ksm($form);
}
